package io.oth.xdsgenerator.service.xds;

import io.oth.xdsgenerator.model.DocumentMetadata;
import io.oth.xdsgenerator.model.xds.OrganisationIdAuthority;
import io.oth.xdsgenerator.model.xds.ProvideAndRegisterDocumentSetRequest;
import org.openehealth.ipf.commons.ihe.xds.core.ebxml.EbXMLAdhocQueryRequest;
import org.openehealth.ipf.commons.ihe.xds.core.ebxml.EbXMLFactory;
import org.openehealth.ipf.commons.ihe.xds.core.ebxml.ebxml30.EbXMLFactory30;
import org.openehealth.ipf.commons.ihe.xds.core.ebxml.ebxml30.EbXMLProvideAndRegisterDocumentSetRequest30;
import org.openehealth.ipf.commons.ihe.xds.core.ebxml.ebxml30.ProvideAndRegisterDocumentSetRequestType;
import org.openehealth.ipf.commons.ihe.xds.core.ebxml.ebxml30.RetrieveDocumentSetRequestType;
import org.openehealth.ipf.commons.ihe.xds.core.metadata.*;
import org.openehealth.ipf.commons.ihe.xds.core.requests.ProvideAndRegisterDocumentSet;
import org.openehealth.ipf.commons.ihe.xds.core.requests.QueryRegistry;
import org.openehealth.ipf.commons.ihe.xds.core.requests.query.FindDocumentsQuery;
import org.openehealth.ipf.commons.ihe.xds.core.requests.query.QueryReturnType;
import org.openehealth.ipf.commons.ihe.xds.core.stub.ebrs30.query.AdhocQueryRequest;
import org.openehealth.ipf.commons.ihe.xds.core.transform.requests.ProvideAndRegisterDocumentSetTransformer;
import org.openehealth.ipf.commons.ihe.xds.core.transform.requests.QueryRegistryTransformer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

import javax.activation.DataHandler;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.*;


@Component
public class XdsRequestBuilderService {
    private static Logger log = LoggerFactory.getLogger(XdsRequestBuilderService.class);

    @Autowired
    OrganisationIdAuthority organisationIdAuthority;

    @Value("${xds.repositoryuniqueid}")
    String repositoryUniqueId;

    @Value("#{new Boolean('${xds.generate.documentid}')}")
    boolean useAutogeneratedExternalDocumentId;

    public RetrieveDocumentSetRequestType buildRetrieveDocumentSetRequestType(List<String> documentIds) {
        RetrieveDocumentSetRequestType retrieveDocumentSetRequestType = new RetrieveDocumentSetRequestType();

        for (Iterator<String> iterator = documentIds.iterator(); iterator.hasNext(); ) {
            RetrieveDocumentSetRequestType.DocumentRequest documentRequest = new RetrieveDocumentSetRequestType.DocumentRequest();
            documentRequest.setRepositoryUniqueId(repositoryUniqueId);
            documentRequest.setDocumentUniqueId(iterator.next());
            retrieveDocumentSetRequestType.getDocumentRequest().add(documentRequest);
        }
        return retrieveDocumentSetRequestType;
    }

    /**
     * Build a {@link ProvideAndRegisterDocumentSet} based on {@link io.oth.xdsgenerator.service.cda.CdaMetaDataFactory} and document payload
     */
    public ProvideAndRegisterDocumentSetRequest buildProvideAndRegisterDocumentSetRequest(String documentId, String documentPayload, DocumentMetadata cdaDocumentMetadata) {
        log.debug("Starting buildProvideAndRegisterDocumentSetRequest");

        DateFormat dateTimeFormat = new SimpleDateFormat("yyyyMMddHHmmss");
        ProvideAndRegisterDocumentSet provideAndRegisterDocumentSet = new ProvideAndRegisterDocumentSet();

        Identifiable patientIdentifiable = null;
        if (cdaDocumentMetadata.getPatientId() != null) {
            AssigningAuthority patientIdAssigningAuthority = new AssigningAuthority(cdaDocumentMetadata.getPatientId().getCodingScheme());
            patientIdentifiable = new Identifiable(cdaDocumentMetadata.getPatientId().getCode(), patientIdAssigningAuthority);
        }
        Identifiable sourcePatientIdentifiable = null;
        if (cdaDocumentMetadata.getSourcePatientId() != null) {
            AssigningAuthority patientIdAssigningAuthority = new AssigningAuthority(cdaDocumentMetadata.getSourcePatientId().getCodingScheme());
            sourcePatientIdentifiable = new Identifiable(cdaDocumentMetadata.getPatientId().getCode(), patientIdAssigningAuthority);
        }

        //author.authorInstitution - organization
        AssigningAuthority organisationAssigningAuthority = new AssigningAuthority(organisationIdAuthority.getPatientIdAuthority());
        Author author = new Author();
        if (cdaDocumentMetadata.getOrganisation() != null && cdaDocumentMetadata.getOrganisation().getCode() != null) {
            Organization authorOrganisation = new Organization(cdaDocumentMetadata.getOrganisation().getName(), cdaDocumentMetadata.getOrganisation().getCode(), organisationAssigningAuthority);
            author.getAuthorInstitution().add(authorOrganisation);
        }

        //author.authorperson
        if (cdaDocumentMetadata.getAuthorPerson() != null && (cdaDocumentMetadata.getAuthorPerson().getFamilyName() != null) || cdaDocumentMetadata.getAuthorPerson().getGivenName() != null) {
            Name<?> authorName = new XcnName();

            if (cdaDocumentMetadata.getAuthorPerson().getFamilyName() != null) {
                authorName.setFamilyName(cdaDocumentMetadata.getAuthorPerson().getFamilyName());
            }
            if (cdaDocumentMetadata.getAuthorPerson().getGivenName() != null) {
                authorName.setGivenName(cdaDocumentMetadata.getAuthorPerson().getGivenName());
            }
            if (cdaDocumentMetadata.getAuthorPerson().getSecondAndFurtherGivenNames() != null) {
                authorName.setSecondAndFurtherGivenNames(cdaDocumentMetadata.getAuthorPerson().getSecondAndFurtherGivenNames());
            }
            Person authorPerson = new Person();
            authorPerson.setName(authorName);
            author.setAuthorPerson(authorPerson);
        }

        String submissionSetUuid = generateUUID();
        String submissionSetId = generateUUIDAdjusted();
        SubmissionSet submissionSet = new SubmissionSet();
        submissionSet.setUniqueId(submissionSetId);
        submissionSet.setSourceId(submissionSetId);
        submissionSet.setLogicalUuid(submissionSetUuid);
        submissionSet.setEntryUuid(submissionSetUuid);
        submissionSet.setPatientId(patientIdentifiable);
        submissionSet.setTitle(new LocalizedString(submissionSetUuid));
        submissionSet.setAuthor(author);

        //TODO: What to do here???
        submissionSet.setContentTypeCode(new Code("NscContentType", new LocalizedString("NscContentType"), io.oth.xdsgenerator.model.xds.UUID.XDSSubmissionSet_contentTypeCode));
        //submissionSet.setContentTypeCode(createCode(documentMetadata.getContentTypeCode()));

        //i submessionTime
        if (cdaDocumentMetadata.getReportTime() != null) {
            submissionSet.setSubmissionTime(cdaDocumentMetadata.getReportTimeStringUTC());
        }


        //i availabilityStatus
        submissionSet.setAvailabilityStatus(cdaDocumentMetadata.getAvailabilityStatus());
        provideAndRegisterDocumentSet.setSubmissionSet(submissionSet);

        String documentUuid = generateUUID();

        DocumentEntry documentEntry = new DocumentEntry();
        // 4.1 Patient Identification
        //patientId
        documentEntry.setPatientId(patientIdentifiable);
        //sourcePatientId
        documentEntry.setSourcePatientId(sourcePatientIdentifiable);

        // 4.2 Name, Address and Telecommunications
        //sourcePatientInfo
        PatientInfo sourcePatientInfo = new PatientInfo();
        documentEntry.setSourcePatientInfo(sourcePatientInfo);

        // 4.2.1 Name
        if (cdaDocumentMetadata.getSourcePatientInfoPerson() != null && (cdaDocumentMetadata.getSourcePatientInfoPerson().getFamilyName() != null) || cdaDocumentMetadata.getSourcePatientInfoPerson().getGivenName() != null) {
            Name<?> name = new XpnName();
            if (cdaDocumentMetadata.getSourcePatientInfoPerson().getFamilyName() != null) {
                name.setFamilyName(cdaDocumentMetadata.getSourcePatientInfoPerson().getFamilyName());
            }
            if (cdaDocumentMetadata.getSourcePatientInfoPerson().getGivenName() != null) {
                name.setGivenName(cdaDocumentMetadata.getSourcePatientInfoPerson().getGivenName());
            }
            if (cdaDocumentMetadata.getSourcePatientInfoPerson().getSecondAndFurtherGivenNames() != null) {
                name.setSecondAndFurtherGivenNames(cdaDocumentMetadata.getSourcePatientInfoPerson().getSecondAndFurtherGivenNames());
            }
            sourcePatientInfo.setName(name);
        }

        if (cdaDocumentMetadata.getSourcePatientInfoGender() != null) {
            sourcePatientInfo.setGender(cdaDocumentMetadata.getSourcePatientInfoGender());
        }
        if (cdaDocumentMetadata.getSourcePatientInfoDateOfBirth() != null) {

            sourcePatientInfo.setDateOfBirth(cdaDocumentMetadata.getSourcePatientInfoDateOfBirthString());

        }


        documentEntry.setEntryUuid(generateUUID());
        documentEntry.setAuthor(author);
        documentEntry.setAvailabilityStatus(cdaDocumentMetadata.getAvailabilityStatus());

        //i classCode
        if (cdaDocumentMetadata.getClassCode() != null) {
            documentEntry.setClassCode(createCode(cdaDocumentMetadata.getClassCode()));
        }

        //confidentialityCode
        if (cdaDocumentMetadata.getConfidentialityCode() != null) {
            // Code name is most likely null
            LocalizedString confidentialityName = cdaDocumentMetadata.getConfidentialityCode().getName() != null ? new LocalizedString(cdaDocumentMetadata.getConfidentialityCode().getName()) : new LocalizedString(cdaDocumentMetadata.getConfidentialityCode().getCode());
            Code confidentialityCode = new Code(cdaDocumentMetadata.getConfidentialityCode().getCode(), confidentialityName, cdaDocumentMetadata.getConfidentialityCode().getCodingScheme());
            documentEntry.getConfidentialityCodes().add(confidentialityCode);
        }
        //creationTime
        if (cdaDocumentMetadata.getReportTime() != null) {
            documentEntry.setCreationTime(cdaDocumentMetadata.getReportTimeStringUTC());
        }

        //eventCodedList
        List<Code> eventCodesEntry = documentEntry.getEventCodeList();
        if (cdaDocumentMetadata.getEventCodes() != null) {
            for (io.oth.xdsgenerator.model.Code eventCode : cdaDocumentMetadata.getEventCodes()) {
                eventCodesEntry.add(createCode(eventCode));
            }
        }
        //i formatCode
        if (cdaDocumentMetadata.getFormatCode() != null) {
            documentEntry.setFormatCode(createCode(cdaDocumentMetadata.getFormatCode()));
        }
        //i healthcareFacilityTypeCode
        if (cdaDocumentMetadata.getHealthcareFacilityTypeCode() != null) {
            documentEntry.setHealthcareFacilityTypeCode(createCode(cdaDocumentMetadata.getHealthcareFacilityTypeCode()));
        }
        //LanguageCode
        if (cdaDocumentMetadata.getLanguageCode() != null) {
            documentEntry.setLanguageCode(cdaDocumentMetadata.getLanguageCode());
        }

        if (cdaDocumentMetadata.getMimeType() != null) {
            documentEntry.setMimeType(cdaDocumentMetadata.getMimeType());
        }

        //i objectType
        if (cdaDocumentMetadata.getObjectType() != null) {
            documentEntry.setType(cdaDocumentMetadata.getObjectType());
        }

        //title
        if (cdaDocumentMetadata.getTitle() != null) {
            documentEntry.setTitle(new LocalizedString(cdaDocumentMetadata.getTitle()));
        }
        //typeCode
        if (cdaDocumentMetadata.getTypeCode() != null) {
            documentEntry.setTypeCode(createCode(cdaDocumentMetadata.getTypeCode()));
        }
        //i practiceSettingCode
        if (cdaDocumentMetadata.getPracticeSettingCode() != null) {
            documentEntry.setPracticeSettingCode(createCode(cdaDocumentMetadata.getPracticeSettingCode()));
        }

        //uniqueId
        String extenalDocumentId = null;
        if (useAutogeneratedExternalDocumentId) {
            extenalDocumentId = generateUUID(); //openxsd does not support this value with ^ included
            log.debug("ExternalDocumentId is auto generated: {}", extenalDocumentId);
        } else {
            extenalDocumentId = cdaDocumentMetadata.getUniqueId();
            log.info("ExternalDocumentId is fetched from metadata: {}", extenalDocumentId);
        }

        documentEntry.setUniqueId(extenalDocumentId);
        documentEntry.setLogicalUuid(documentUuid);

        //legalAuthenticator
        if (cdaDocumentMetadata.getLegalAuthenticator() != null && (cdaDocumentMetadata.getLegalAuthenticator().getFamilyName() != null || cdaDocumentMetadata.getLegalAuthenticator().getGivenName() != null)) {
            Name<?> legalAuthenticatorName = new XcnName();
            if (cdaDocumentMetadata.getLegalAuthenticator().getFamilyName() != null) {
                legalAuthenticatorName.setFamilyName(cdaDocumentMetadata.getLegalAuthenticator().getFamilyName());
            }
            if (cdaDocumentMetadata.getLegalAuthenticator().getGivenName() != null) {
                legalAuthenticatorName.setGivenName(cdaDocumentMetadata.getLegalAuthenticator().getGivenName());
            }
            if (cdaDocumentMetadata.getLegalAuthenticator().getSecondAndFurtherGivenNames() != null) {
                legalAuthenticatorName.setSecondAndFurtherGivenNames(cdaDocumentMetadata.getLegalAuthenticator().getSecondAndFurtherGivenNames());
            }
            Person legalAuthenticatorPerson = new Person();
            legalAuthenticatorPerson.setName(legalAuthenticatorName);
            documentEntry.setLegalAuthenticator(legalAuthenticatorPerson);
        }

        //serviceStartTime
        if (cdaDocumentMetadata.getServiceStartTime() != null) {
            documentEntry.setServiceStartTime(cdaDocumentMetadata.getServiceStartTimeStringUTC());
            cdaDocumentMetadata.getServiceStartTime();

        }

        //serviceStopTime
        if (cdaDocumentMetadata.getServiceStopTime() != null) {
            documentEntry.setServiceStopTime(cdaDocumentMetadata.getServiceStopTimeStringUTC());
        }


        //i referenceIdlist - not included

        Document document = new Document(documentEntry, new DataHandler(documentPayload.getBytes(), cdaDocumentMetadata.getMimeType()));
        provideAndRegisterDocumentSet.getDocuments().add(document);

        Association association = new Association();
        association.setAssociationType(AssociationType.HAS_MEMBER);
        association.setEntryUuid(generateUUID());
        association.setSourceUuid(submissionSet.getEntryUuid());
        association.setTargetUuid(documentEntry.getEntryUuid());
        association.setAvailabilityStatus(cdaDocumentMetadata.getAvailabilityStatus());
        association.setOriginalStatus(cdaDocumentMetadata.getAvailabilityStatus());
        association.setNewStatus(cdaDocumentMetadata.getAvailabilityStatus());
        association.setLabel(AssociationLabel.ORIGINAL);
        provideAndRegisterDocumentSet.getAssociations().add(association);

        ProvideAndRegisterDocumentSetTransformer registerDocumentSetTransformer = new ProvideAndRegisterDocumentSetTransformer(getEbXmlFactory());
        EbXMLProvideAndRegisterDocumentSetRequest30 ebxmlRequest = (EbXMLProvideAndRegisterDocumentSetRequest30) registerDocumentSetTransformer.toEbXML(provideAndRegisterDocumentSet);
        ProvideAndRegisterDocumentSetRequestType provideAndRegisterDocumentSetRequestType = ebxmlRequest.getInternal();

        ProvideAndRegisterDocumentSetRequest provideAndRegisterDocumentSetRequest = new ProvideAndRegisterDocumentSetRequest(extenalDocumentId, provideAndRegisterDocumentSetRequestType);

        log.debug("Returning from buildProvideAndRegisterDocumentSetRequest");
        return provideAndRegisterDocumentSetRequest;
    }

    private Code createCode(io.oth.xdsgenerator.model.Code code) {
        Code result = new Code(code.getCode(), new LocalizedString(code.getName()), code.getCodingScheme());
        return result;
    }

    private static final EbXMLFactory ebXMLFactory = new EbXMLFactory30();

    protected EbXMLFactory getEbXmlFactory() {
        return ebXMLFactory;
    }

    private String generateUUID() {
        java.util.UUID uuid = java.util.UUID.randomUUID();
        return Math.abs(uuid.getLeastSignificantBits()) + "." + Math.abs(uuid.getMostSignificantBits()) + "." + Calendar.getInstance().getTimeInMillis();
    }

    private String generateUUIDAdjusted() {
        java.util.UUID uuid = java.util.UUID.randomUUID();
        return Math.abs(uuid.getLeastSignificantBits()) + "." + Math.abs(uuid.getMostSignificantBits()) + "." + Calendar.getInstance().getTimeInMillis();
    }

    public AdhocQueryRequest buildAdhocQueryRequest(String citizenId, List<Code> typeCodes, Date start, Date end) {
        return buildAdhocQueryRequest(citizenId, typeCodes, AvailabilityStatus.APPROVED, start, end);
    }

    public AdhocQueryRequest buildAdhocQueryRequest(String citizenId, List<Code> typeCodes, AvailabilityStatus availabilityStatus, Date start, Date end) {
        FindDocumentsQuery fdq = new FindDocumentsQuery();
        DateFormat dateTimeFormat = new SimpleDateFormat("yyyyMMddHHmmss");
        AssigningAuthority authority = new AssigningAuthority(organisationIdAuthority.getPatientIdAuthority());

        // Patient ID
        Identifiable patientIdentifiable = new Identifiable(citizenId, authority);
        fdq.setPatientId(patientIdentifiable);

        // Availability Status
        List<AvailabilityStatus> availabilityStati = new LinkedList<AvailabilityStatus>();
        availabilityStati.add(availabilityStatus);
        fdq.setStatus(availabilityStati);

        if (typeCodes != null) {
            fdq.setTypeCodes(typeCodes);
        }

        if (start != null) {
            fdq.getServiceStartTime().setFrom(dateTimeFormat.format(start));
        }

        if (end != null) {
            fdq.getServiceStartTime().setTo(dateTimeFormat.format(end));
        }


        QueryRegistry queryRegistry = new QueryRegistry(fdq);
        QueryReturnType qrt = QueryReturnType.LEAF_CLASS;

        if (qrt != null) {
            queryRegistry.setReturnType(qrt);
        }

        QueryRegistryTransformer queryRegistryTransformer = new QueryRegistryTransformer();
        EbXMLAdhocQueryRequest ebxmlAdhocQueryRequest = queryRegistryTransformer.toEbXML(queryRegistry);
        AdhocQueryRequest internal = (AdhocQueryRequest) ebxmlAdhocQueryRequest.getInternal();

        return internal;
    }
}
