#+TITLE: OTH XDS Generator
#+OPTIONS: toc:nil

#+BEGIN_COMMENT
This file is the base from which to generate the README.md file.

The readme can be generated by running:

org-export-dispatch->Export to Markdown -> To file

It can also be triggered from the shell by $ make documentation
#+END_COMMENT

#+begin_quote
This document is generated from =README.org=.

Use the =documentation= Make target to generate it.
#+end_quote


* Purpose
The purpose of the =XDS Generator= is to create a PHMR Record of a measurement and package it into an =XDS= document and submit it to a XDS repository using the =ITI-41= interface.

The XDS Generator is currently setup to support the Danish XDS profile. This is defined here: https://svn.medcom.dk/svn/releases/Standarder/HL7/PHMR/Dokumentation/

** Responsibilities
The XDS Generator handles the following responsibilities:
- Generation of PHMR
- Generation of CDA for the PHMR
- Generation of XDS metadata for submission to XDS repository
- Submitting the CDA and XDS metadata to XDS repository notifying the invoker about success or failure

* Solution Overview
This section provides an overview of the solution ensuring measurements in a OTH installation is exported to a XDS repository.

#+begin_src plantuml :file docs/images/solution-overview.png
title Solution Overview
hide footbox

actor Citizen as c
component OTH as oth
component Exporter as ex
component xdsg as "XDS Generator"

card  NSP as "NSP" {
component STS
component xdsr as "XDS Repository"
}


c --|> oth : Submits measurements
ex --|> oth : Get measurements
ex --|> xdsg : Create PHMR
xdsg --|> xdsg : 1. Generate PHMR
xdsg --|> xdsg : 2. Generate CDA
xdsg --|> xdsg : 3. Generate XDS
xdsg --|> STS : 4. Get SOSI idcard
xdsg --|> xdsr : 5. ITI-41 ProvideAndRegisterDocumentSet-b
xdsg --|> ex : Notify exported successfully or not


#+end_src

#+RESULTS:
[[file:docs/images/solution-overview.png]]

The basic flow is as follows:
1. Citizen submits measurement to OTH
2. The exporter requests all measurements since it's last run
3. For measurements not exported
   a. Generate ID
   b. Create Measurement format for the =XDS Generator=
   c. Submit measurement to =XDS Generator=
   d. Note if measurement is exported successfully or not
4. The XDS Generator does the following when invoked:
   a. Create PHMR from request
   b. Generate CDA from PHMR
   c. Generate XDS metadata and ITI-41 request from CDA
   d. Sign request using NSP STS
   e. Submit request to XDS Repository
   f. Send response back to Exporter indicate success or failure


* Configuration
The =XDS Generator= is =Spring Boot= application. There the standard configuration items like howto change log levels, server port etc is done as a standard =Spring Boot= application.

The =XDS Generator= is setup using =yaml=. The configuration file looks like this:

#+begin_src yaml
#
# Application settings
#

xds:
  repositoryuniqueid: 1.2.208.176.43210.8.1.29
  generate:
    documentid: false
  iti41:
    endpoint: http://kih.test.xdsrepositoryb.medcom.dk:8031/kih-iti41/iti41

sor:
  code: 6071000016008
  name: TeleCare Nord

# DGWS Setup for vaults and what note
dgws:
  enabled: false
  sts:
    url: https://test2.ekstern-test.nspop.dk:8443/sts/services/SecurityTokenService
  keystore:
    type: production
    alias: nets danid a/s - tu voces gyldig
    filename: classpath:VOCES_gyldig_2022.p12
    password: Test1234
  certificate:
    itsystem: TRUST2408 Systemtest XIX CA
    orgname: NETS DANID A/S
    cvr: 30808460

#
# Logger configuration
#
logging:
  level:
    root: warn
    org:
      apache:
        cxf: warn
    io:
      oth:
        xdsgenerator:
          handlers:
            KihDataController: info


  pattern:
    dateformat: yyyy-MM-dd HH:mm:ss.SSS
    console: "%d %-5p %-30.30logger{29}: %m %n %ex{2}"


#
# Standard spring settings
#
spring:
  output:
    ansi:
      enabled: detect

management:
  endpoint:
    health:
      probes:
        enabled: true
      show-details: always

server:
  error:
    include-stacktrace: never
  port: 9010
  tomcat:
    accesslog:
      enabled: true
      pattern: "%t sip=%h r=\"%r\" htsc=%s B=%b tt=%D tid=%I ua=\"%{User-Agent}i\""
    basedir: tomcat

#+end_src

The settings under the =logging=, =spring=, =management=, and =server= root nodes are standare spring boot settings, and can be studied on spring boot resources.

The following settings are application specific settings, and will be documented below:

| Key                       | Type    | Description                                 |
|---------------------------+---------+---------------------------------------------|
| xds:repositoryuniqueid    | string  | The ID for the XDS repository to send to    |
| xds:generate:documentid   | boolean | Use uuid in request, or generate an UUID    |
| xds:iti41:endpoint        |         | The URL for the ITI-41 endpoint to send to. |
|---------------------------+---------+---------------------------------------------|
| sor:code                  | string  | Numeric SOR code                            |
| sor:name                  | string  | Name to append to sor code                  |
|---------------------------+---------+---------------------------------------------|
| dgws:enabled              | boolean | Whether to add IDCard to request            |
| dgws:sts:url              | string  | The URL to the STS to use for DGWS IdCard   |
| dgws:keystore:type        | string  | Production or test                          |
| dgws:keystore:alias       | string  | The alias of the certificate                |
| dgws:keystore:filename    | string  | location for the certificate                |
| dgws:keystore:password    | string  | The password for the certificate            |
| dgws:certificate:itsystem | string  | String denoting the system                  |
| dgws:certificate:orgname  | string  | Name of organisation                        |
| dgws:certificate:cvr      | string  | The CVR number of the organisation          |


# Local Variables:
# eval: (message "After save")
# End:
